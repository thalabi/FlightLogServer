<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
	xsi:schemaLocation="
		http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
		http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <changeSet author="thalabi" id="trigger">
	    <preConditions onFail="CONTINUE">
	        <dbms type="oracle" />
	    </preConditions>
		<sql endDelimiter="/">
		<![CDATA[

create or replace TRIGGER flight_log_fDIU for delete or insert or update on flight_log
compound trigger

    TABLE_NAME varchar2(30) := 'flight_log';
    THIS_SCHAMA_NAME varchar2(30) := '${new.schema.name}';
    OTHER_SCHAMA_NAME varchar2(30) := '${legacy.schema.name}';
    PROCEDURE_LOG_NAME varchar2(64) := THIS_SCHAMA_NAME || '.flight_log_fdiu';
    status integer;
    
    this_trigger_disabled boolean;
    
    old_flight_date ${new.schema.name}.flight_log.flight_date%type;
    old_rowid rowid;
    
before statement is
begin
    common.procedure_logger(PROCEDURE_LOG_NAME, 'begin');
    status := common.trigger_status_pkg.get_trigger_status(THIS_SCHAMA_NAME, TABLE_NAME);
    if (status is null or status = 0) then
        common.procedure_logger(PROCEDURE_LOG_NAME, 'trigger disabled');
        this_trigger_disabled := true;
    else
        this_trigger_disabled := false;
        common.trigger_status_pkg.set_trigger_status(OTHER_SCHAMA_NAME, TABLE_NAME, 0);
    end if;
end before statement;

before each row is
begin
    if (not this_trigger_disabled) then
        if (inserting) then
            common.procedure_logger(PROCEDURE_LOG_NAME, 'operation is inserting');
            insert into ${legacy.schema.name}.flight_log (flight_date,sequence,co_pilot,day_dual,day_solo,instrument_flight_sim,instrument_imc,instrument_no_ifr_appr,instrument_simulated,make_model,night_dual,night_solo,pic,registration,remarks,route_from,route_to,tos_ldgs_day,tos_ldgs_night,x_country_day,x_country_night) values (:new.flight_date,${legacy.schema.name}.flight_log_seq.nextval,:new.co_pilot,nvl(:new.day_dual,0),nvl(:new.day_solo,0),nvl(:new.instrument_flight_sim,0),nvl(:new.instrument_imc,0),nvl(:new.instrument_no_ifr_appr,0),nvl(:new.instrument_simulated,0),:new.make_model,nvl(:new.night_dual,0),nvl(:new.night_solo,0),:new.pic,:new.registration,:new.remarks,:new.route_from,:new.route_to,nvl(:new.tos_ldgs_day,0),nvl(:new.tos_ldgs_night,0),nvl(:new.x_country_day,0),nvl(:new.x_country_night,0));
        elsif (updating) then
            common.procedure_logger(PROCEDURE_LOG_NAME, 'operation is updating');
            common.procedure_logger(PROCEDURE_LOG_NAME, 'delete ${legacy.schema.name}.flight_log where flight_date = :old.flight_date;');
            delete ${legacy.schema.name}.flight_log where flight_date = :old.flight_date;
            old_flight_date := :old.flight_date;
            old_rowid := :old.rowid;
            common.procedure_logger(PROCEDURE_LOG_NAME,
                'insert into ${legacy.schema.name}.flight_log (flight_date,sequence,co_pilot,day_dual,day_solo,instrument_flight_sim,instrument_imc,instrument_no_ifr_appr,instrument_simulated,make_model,night_dual,night_solo,pic,registration,remarks,route_from,route_to,tos_ldgs_day,tos_ldgs_night,x_country_day,x_country_night) values (:new.flight_date,${legacy.schema.name}.flight_log_seq.nextval,:new.co_pilot,nvl(:new.day_dual,0),nvl(:new.day_solo,0),nvl(:new.instrument_flight_sim,0),nvl(:new.instrument_imc,0),nvl(:new.instrument_no_ifr_appr,0),nvl(:new.instrument_simulated,0),:new.make_model,nvl(:new.night_dual,0),nvl(:new.night_solo,0),:new.pic,:new.registration,:new.remarks,:new.route_from,:new.route_to,nvl(:new.tos_ldgs_day,0),nvl(:new.tos_ldgs_night,0),nvl(:new.x_country_day,0),nvl(:new.x_country_night,0));'
                );
            insert into ${legacy.schema.name}.flight_log (flight_date,sequence,co_pilot,day_dual,day_solo,instrument_flight_sim,instrument_imc,instrument_no_ifr_appr,instrument_simulated,make_model,night_dual,night_solo,pic,registration,remarks,route_from,route_to,tos_ldgs_day,tos_ldgs_night,x_country_day,x_country_night) values (:new.flight_date,${legacy.schema.name}.flight_log_seq.nextval,:new.co_pilot,nvl(:new.day_dual,0),nvl(:new.day_solo,0),nvl(:new.instrument_flight_sim,0),nvl(:new.instrument_imc,0),nvl(:new.instrument_no_ifr_appr,0),nvl(:new.instrument_simulated,0),:new.make_model,nvl(:new.night_dual,0),nvl(:new.night_solo,0),:new.pic,:new.registration,:new.remarks,:new.route_from,:new.route_to,nvl(:new.tos_ldgs_day,0),nvl(:new.tos_ldgs_night,0),nvl(:new.x_country_day,0),nvl(:new.x_country_night,0));
        else
            common.procedure_logger(PROCEDURE_LOG_NAME, 'operation is deleting');
            delete ${legacy.schema.name}.flight_log where flight_date = :old.flight_date;
            old_flight_date := :old.flight_date;
            old_rowid := :old.rowid;
        end if;
    end if;
end before each row;

after statement is
begin
    if (not this_trigger_disabled) then
        if (not inserting) then
            common.procedure_logger(PROCEDURE_LOG_NAME,
                'insert into ${legacy.schema.name}.flight_log (flight_date,sequence,co_pilot,day_dual,day_solo,instrument_flight_sim,instrument_imc,instrument_no_ifr_appr,instrument_simulated,make_model,night_dual,night_solo,pic,registration,remarks,route_from,route_to,tos_ldgs_day,tos_ldgs_night,x_country_day,x_country_night) ' ||
                    'select flight_date,${legacy.schema.name}.flight_log_seq.nextval,co_pilot,nvl(day_dual,0),nvl(day_solo,0),nvl(instrument_flight_sim,0),nvl(instrument_imc,0),nvl(instrument_no_ifr_appr,0),nvl(instrument_simulated,0),make_model,nvl(night_dual,0),nvl(night_solo,0),pic,registration,remarks,route_from,route_to,nvl(tos_ldgs_day,0),nvl(tos_ldgs_night,0),nvl(x_country_day,0),nvl(x_country_night,0) ' ||
                      'from ${new.schema.name}.flight_log where flight_date = old_flight_date and rowid != old_rowid;'
                );
            insert into ${legacy.schema.name}.flight_log (flight_date,sequence,co_pilot,day_dual,day_solo,instrument_flight_sim,instrument_imc,instrument_no_ifr_appr,instrument_simulated,make_model,night_dual,night_solo,pic,registration,remarks,route_from,route_to,tos_ldgs_day,tos_ldgs_night,x_country_day,x_country_night)
                select flight_date,${legacy.schema.name}.flight_log_seq.nextval,co_pilot,nvl(day_dual,0),nvl(day_solo,0),nvl(instrument_flight_sim,0),nvl(instrument_imc,0),nvl(instrument_no_ifr_appr,0),nvl(instrument_simulated,0),make_model,nvl(night_dual,0),nvl(night_solo,0),pic,registration,remarks,route_from,route_to,nvl(tos_ldgs_day,0),nvl(tos_ldgs_night,0),nvl(x_country_day,0),nvl(x_country_night,0)
                  from ${new.schema.name}.flight_log where flight_date = old_flight_date and rowid != old_rowid;
        end if;
        common.trigger_status_pkg.set_trigger_status(OTHER_SCHAMA_NAME, TABLE_NAME, 1);
    end if;
    common.procedure_logger(PROCEDURE_LOG_NAME, 'end');
end after statement;
end;
/
		]]>         
		</sql>
		<sql>
		<![CDATA[
		merge into common.trigger_status target
			using (select '${new.schema.name}' as schema_name, 'flight_log' as table_name from dual) source
			on (target.schema_name = source.schema_name and target.table_name = source.table_name)
		when not matched then
			insert values (source.schema_name, source.table_name, 1);
		]]>         
		</sql>
		<rollback>
			<sql>
drop trigger flight_log_fdiu;
delete from common.trigger_status where schema_name='${new.schema.name}' and table='flight_log'
			</sql>
		</rollback>
	</changeSet>
</databaseChangeLog>